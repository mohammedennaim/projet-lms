{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle responses and errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  register: async userData => {\n    try {\n      console.log('Sending registration data:', userData);\n      const response = await api.post('/register', userData);\n      console.log('Registration response:', response.data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data;\n      console.error('Registration error:', error);\n      console.error('Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'Registration failed'\n      };\n    }\n  },\n  login: async credentials => {\n    try {\n      console.log('Sending login data:', credentials);\n      const response = await api.post('/login', credentials);\n      console.log('Login response:', response.data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response5, _error$response5$data;\n      console.error('Login error:', error);\n      console.error('Error response:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message || 'Login failed'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","register","userData","console","log","post","data","success","_error$response2","_error$response3","_error$response3$data","message","login","credentials","_error$response4","_error$response5","_error$response5$data"],"sources":["C:/Users/Youcode/Desktop/lms/projet-lms/FrontEnd/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Handle responses and errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  register: async (userData) => {\r\n    try {\r\n      console.log('Sending registration data:', userData);\r\n      const response = await api.post('/register', userData);\r\n      console.log('Registration response:', response.data);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      console.error('Error response:', error.response?.data);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || error.message || 'Registration failed'\r\n      };\r\n    }\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    try {\r\n      console.log('Sending login data:', credentials);\r\n      const response = await api.post('/login', credentials);\r\n      console.log('Login response:', response.data);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      console.error('Error response:', error.response?.data);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || error.message || 'Login failed'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}