{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Youcode\\\\Desktop\\\\lms\\\\projet-lms\\\\FrontEnd\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// JWT Token utilities\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst JWT_TOKEN_KEY = 'jwt_token';\nconst JWT_REFRESH_TOKEN_KEY = 'jwt_refresh_token';\nconst USER_DATA_KEY = 'user_data';\nconst jwtUtils = {\n  // Store tokens\n  setTokens: (token, refreshToken = null) => {\n    localStorage.setItem(JWT_TOKEN_KEY, token);\n    if (refreshToken) {\n      localStorage.setItem(JWT_REFRESH_TOKEN_KEY, refreshToken);\n    }\n  },\n  // Get access token\n  getToken: () => {\n    return localStorage.getItem(JWT_TOKEN_KEY);\n  },\n  // Get refresh token\n  getRefreshToken: () => {\n    return localStorage.getItem(JWT_REFRESH_TOKEN_KEY);\n  },\n  // Remove all tokens\n  clearTokens: () => {\n    localStorage.removeItem(JWT_TOKEN_KEY);\n    localStorage.removeItem(JWT_REFRESH_TOKEN_KEY);\n    localStorage.removeItem(USER_DATA_KEY);\n  },\n  // Check if token is expired\n  isTokenExpired: token => {\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp < currentTime;\n    } catch (error) {\n      return true;\n    }\n  },\n  // Decode token payload\n  decodeToken: token => {\n    if (!token) return null;\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (error) {\n      return null;\n    }\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in on app load\n    const storedToken = jwtUtils.getToken();\n    const userData = localStorage.getItem(USER_DATA_KEY);\n    if (storedToken && userData) {\n      // Check if token is still valid\n      if (!jwtUtils.isTokenExpired(storedToken)) {\n        setToken(storedToken);\n        setIsAuthenticated(true);\n        setUser(JSON.parse(userData));\n\n        // Set up axios interceptor for this token\n        setupAxiosInterceptors(storedToken);\n      } else {\n        // Token expired, try to refresh or logout\n        handleTokenExpired();\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Setup axios interceptors for JWT\n  const setupAxiosInterceptors = authToken => {\n    // Request interceptor to add JWT token\n    axios.interceptors.request.use(config => {\n      if (authToken) {\n        config.headers.Authorization = `Bearer ${authToken}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor to handle token expiration\n    axios.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        // Try to refresh token\n        const refreshToken = jwtUtils.getRefreshToken();\n        if (refreshToken) {\n          try {\n            const newToken = await refreshAccessToken(refreshToken);\n            if (newToken) {\n              originalRequest.headers.Authorization = `Bearer ${newToken}`;\n              return axios(originalRequest);\n            }\n          } catch (refreshError) {\n            handleTokenExpired();\n          }\n        } else {\n          handleTokenExpired();\n        }\n      }\n      return Promise.reject(error);\n    });\n  };\n\n  // Handle token expiration\n  const handleTokenExpired = () => {\n    jwtUtils.clearTokens();\n    setToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  // Refresh access token\n  const refreshAccessToken = async refreshToken => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/refresh`, {\n        refresh_token: refreshToken\n      });\n      const {\n        token: newToken,\n        refresh_token: newRefreshToken\n      } = response.data;\n      jwtUtils.setTokens(newToken, newRefreshToken);\n      setToken(newToken);\n      return newToken;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, credentials);\n      const {\n        token: authToken,\n        refresh_token: refreshToken,\n        user: userData\n      } = response.data;\n\n      // Store tokens and user data\n      jwtUtils.setTokens(authToken, refreshToken);\n      localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n\n      // Update state\n      setToken(authToken);\n      setIsAuthenticated(true);\n      setUser(userData);\n\n      // Setup axios interceptors\n      setupAxiosInterceptors(authToken);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Erreur de connexion';\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const logout = () => {\n    jwtUtils.clearTokens();\n    setToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n\n    // Clear axios interceptors\n    axios.interceptors.request.clear();\n    axios.interceptors.response.clear();\n  };\n\n  // Get current JWT token\n  const getToken = () => {\n    return token || jwtUtils.getToken();\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    if (!user || !user.roles) return false;\n    return user.roles.includes(role);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return hasRole('ROLE_ADMIN');\n  };\n\n  // Check if user is employee\n  const isEmployee = () => {\n    return hasRole('ROLE_EMPLOYEE') || hasRole('ROLE_EMPLOYÃ‰E');\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    token,\n    login,\n    logout,\n    loading,\n    getToken,\n    hasRole,\n    isAdmin,\n    isEmployee,\n    refreshAccessToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"E+POdgEtWVsyEcJme7CVWlq6S84=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","JWT_TOKEN_KEY","JWT_REFRESH_TOKEN_KEY","USER_DATA_KEY","jwtUtils","setTokens","token","refreshToken","localStorage","setItem","getToken","getItem","getRefreshToken","clearTokens","removeItem","isTokenExpired","payload","JSON","parse","atob","split","currentTime","Date","now","exp","error","decodeToken","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","setToken","storedToken","userData","setupAxiosInterceptors","handleTokenExpired","authToken","interceptors","request","use","config","headers","Authorization","Promise","reject","response","_error$response","originalRequest","status","_retry","newToken","refreshAccessToken","refreshError","post","process","env","REACT_APP_API_BASE_URL","refresh_token","newRefreshToken","data","login","credentials","stringify","success","_error$response2","_error$response2$data","message","logout","clear","hasRole","role","roles","includes","isAdmin","isEmployee","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Youcode/Desktop/lms/projet-lms/FrontEnd/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// JWT Token utilities\r\nconst JWT_TOKEN_KEY = 'jwt_token';\r\nconst JWT_REFRESH_TOKEN_KEY = 'jwt_refresh_token';\r\nconst USER_DATA_KEY = 'user_data';\r\n\r\nconst jwtUtils = {\r\n  // Store tokens\r\n  setTokens: (token, refreshToken = null) => {\r\n    localStorage.setItem(JWT_TOKEN_KEY, token);\r\n    if (refreshToken) {\r\n      localStorage.setItem(JWT_REFRESH_TOKEN_KEY, refreshToken);\r\n    }\r\n  },\r\n\r\n  // Get access token\r\n  getToken: () => {\r\n    return localStorage.getItem(JWT_TOKEN_KEY);\r\n  },\r\n\r\n  // Get refresh token\r\n  getRefreshToken: () => {\r\n    return localStorage.getItem(JWT_REFRESH_TOKEN_KEY);\r\n  },\r\n\r\n  // Remove all tokens\r\n  clearTokens: () => {\r\n    localStorage.removeItem(JWT_TOKEN_KEY);\r\n    localStorage.removeItem(JWT_REFRESH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_DATA_KEY);\r\n  },\r\n\r\n  // Check if token is expired\r\n  isTokenExpired: (token) => {\r\n    if (!token) return true;\r\n    \r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const currentTime = Date.now() / 1000;\r\n      return payload.exp < currentTime;\r\n    } catch (error) {\r\n      return true;\r\n    }\r\n  },\r\n\r\n  // Decode token payload\r\n  decodeToken: (token) => {\r\n    if (!token) return null;\r\n    \r\n    try {\r\n      return JSON.parse(atob(token.split('.')[1]));\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n  useEffect(() => {\r\n    // Check if user is logged in on app load\r\n    const storedToken = jwtUtils.getToken();\r\n    const userData = localStorage.getItem(USER_DATA_KEY);\r\n    \r\n    if (storedToken && userData) {\r\n      // Check if token is still valid\r\n      if (!jwtUtils.isTokenExpired(storedToken)) {\r\n        setToken(storedToken);\r\n        setIsAuthenticated(true);\r\n        setUser(JSON.parse(userData));\r\n        \r\n        // Set up axios interceptor for this token\r\n        setupAxiosInterceptors(storedToken);\r\n      } else {\r\n        // Token expired, try to refresh or logout\r\n        handleTokenExpired();\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Setup axios interceptors for JWT\r\n  const setupAxiosInterceptors = (authToken) => {\r\n    // Request interceptor to add JWT token\r\n    axios.interceptors.request.use(\r\n      (config) => {\r\n        if (authToken) {\r\n          config.headers.Authorization = `Bearer ${authToken}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor to handle token expiration\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          \r\n          // Try to refresh token\r\n          const refreshToken = jwtUtils.getRefreshToken();\r\n          if (refreshToken) {\r\n            try {\r\n              const newToken = await refreshAccessToken(refreshToken);\r\n              if (newToken) {\r\n                originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n                return axios(originalRequest);\r\n              }\r\n            } catch (refreshError) {\r\n              handleTokenExpired();\r\n            }\r\n          } else {\r\n            handleTokenExpired();\r\n          }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  // Handle token expiration\r\n  const handleTokenExpired = () => {\r\n    jwtUtils.clearTokens();\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  // Refresh access token\r\n  const refreshAccessToken = async (refreshToken) => {\r\n    try {\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/refresh`, {\r\n        refresh_token: refreshToken\r\n      });\r\n      \r\n      const { token: newToken, refresh_token: newRefreshToken } = response.data;\r\n      jwtUtils.setTokens(newToken, newRefreshToken);\r\n      setToken(newToken);\r\n      \r\n      return newToken;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/auth/login`, credentials);\r\n      \r\n      const { token: authToken, refresh_token: refreshToken, user: userData } = response.data;\r\n      \r\n      // Store tokens and user data\r\n      jwtUtils.setTokens(authToken, refreshToken);\r\n      localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\r\n      \r\n      // Update state\r\n      setToken(authToken);\r\n      setIsAuthenticated(true);\r\n      setUser(userData);\r\n      \r\n      // Setup axios interceptors\r\n      setupAxiosInterceptors(authToken);\r\n      \r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Erreur de connexion';\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    jwtUtils.clearTokens();\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n    \r\n    // Clear axios interceptors\r\n    axios.interceptors.request.clear();\r\n    axios.interceptors.response.clear();\r\n  };\r\n\r\n  // Get current JWT token\r\n  const getToken = () => {\r\n    return token || jwtUtils.getToken();\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role) => {\r\n    if (!user || !user.roles) return false;\r\n    return user.roles.includes(role);\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return hasRole('ROLE_ADMIN');\r\n  };\r\n\r\n  // Check if user is employee\r\n  const isEmployee = () => {\r\n    return hasRole('ROLE_EMPLOYEE') || hasRole('ROLE_EMPLOYÃ‰E');\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    token,\r\n    login,\r\n    logout,\r\n    loading,\r\n    getToken,\r\n    hasRole,\r\n    isAdmin,\r\n    isEmployee,\r\n    refreshAccessToken\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}