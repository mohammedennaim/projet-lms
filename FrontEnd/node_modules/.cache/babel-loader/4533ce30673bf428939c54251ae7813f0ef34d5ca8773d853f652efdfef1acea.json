{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:8000/api';// Create axios instance with default config\nconst courseAPI=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add interceptor to include JWT token\ncourseAPI.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Add response interceptor to handle errors\ncourseAPI.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid\nlocalStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Course service functions\nexport const courseService={// Get all courses\ngetAllCourses:async()=>{try{const response=await courseAPI.get('/admin/courses');// Return courses array from admin API response structure\nreturn response.data.courses||[];}catch(error){console.error('Error fetching courses:',error);throw new Error('Erreur lors de la récupération des cours');}},// Get course by ID\ngetCourseById:async id=>{try{const response=await courseAPI.get(\"/admin/courses/\".concat(id));// Admin API returns course object directly\nreturn response.data;}catch(error){console.error('Error fetching course:',error);throw new Error('Erreur lors de la récupération du cours');}},// Create new course\ncreateCourse:async courseData=>{try{const response=await courseAPI.post('/admin/courses',courseData);// Admin API returns { message, course }\nreturn response.data.course||response.data;}catch(error){console.error('Error creating course:',error);throw new Error('Erreur lors de la création du cours');}},// Update course\nupdateCourse:async(id,courseData)=>{try{const response=await courseAPI.put(\"/admin/courses/\".concat(id),courseData);// Admin API returns { message, course }\nreturn response.data.course||response.data;}catch(error){console.error('Error updating course:',error);throw new Error('Erreur lors de la mise à jour du cours');}},// Delete course\ndeleteCourse:async id=>{try{await courseAPI.delete(\"/admin/courses/\".concat(id));return true;}catch(error){console.error('Error deleting course:',error);throw new Error('Erreur lors de la suppression du cours');}},// Search courses\nsearchCourses:async searchTerm=>{try{const response=await courseAPI.get(\"/admin/courses?search=\".concat(encodeURIComponent(searchTerm)));// Return courses array from admin API response structure\nreturn response.data.courses||[];}catch(error){console.error('Error searching courses:',error);throw new Error('Erreur lors de la recherche de cours');}},// Get courses with pagination\ngetCoursesWithPagination:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const response=await courseAPI.get(\"/admin/courses?page=\".concat(page,\"&limit=\").concat(limit));return response.data;// Returns { courses: [...], pagination: {...} }\n}catch(error){console.error('Error fetching courses with pagination:',error);throw new Error('Erreur lors de la récupération des cours avec pagination');}}};export default courseService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","courseAPI","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","courseService","getAllCourses","get","data","courses","console","Error","getCourseById","id","createCourse","courseData","post","course","updateCourse","put","deleteCourse","delete","searchCourses","searchTerm","encodeURIComponent","getCoursesWithPagination","page","arguments","length","undefined","limit"],"sources":["C:/Users/Youcode/Desktop/lms/projet-lms/FrontEnd/src/services/courseService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\r\n\r\n// Create axios instance with default config\r\nconst courseAPI = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add interceptor to include JWT token\r\ncourseAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\ncourseAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Course service functions\r\nexport const courseService = {  // Get all courses\r\n  getAllCourses: async () => {\r\n    try {\r\n      const response = await courseAPI.get('/admin/courses');\r\n      // Return courses array from admin API response structure\r\n      return response.data.courses || [];\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      throw new Error('Erreur lors de la récupération des cours');\r\n    }\r\n  },\r\n  // Get course by ID\r\n  getCourseById: async (id) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses/${id}`);\r\n      // Admin API returns course object directly\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching course:', error);\r\n      throw new Error('Erreur lors de la récupération du cours');\r\n    }\r\n  },\r\n\r\n  // Create new course\r\n  createCourse: async (courseData) => {\r\n    try {\r\n      const response = await courseAPI.post('/admin/courses', courseData);\r\n      // Admin API returns { message, course }\r\n      return response.data.course || response.data;\r\n    } catch (error) {\r\n      console.error('Error creating course:', error);\r\n      throw new Error('Erreur lors de la création du cours');\r\n    }\r\n  },\r\n\r\n  // Update course\r\n  updateCourse: async (id, courseData) => {\r\n    try {\r\n      const response = await courseAPI.put(`/admin/courses/${id}`, courseData);\r\n      // Admin API returns { message, course }\r\n      return response.data.course || response.data;\r\n    } catch (error) {\r\n      console.error('Error updating course:', error);\r\n      throw new Error('Erreur lors de la mise à jour du cours');\r\n    }\r\n  },\r\n\r\n  // Delete course\r\n  deleteCourse: async (id) => {\r\n    try {\r\n      await courseAPI.delete(`/admin/courses/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting course:', error);\r\n      throw new Error('Erreur lors de la suppression du cours');\r\n    }\r\n  },  // Search courses\r\n  searchCourses: async (searchTerm) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses?search=${encodeURIComponent(searchTerm)}`);\r\n      // Return courses array from admin API response structure\r\n      return response.data.courses || [];\r\n    } catch (error) {\r\n      console.error('Error searching courses:', error);\r\n      throw new Error('Erreur lors de la recherche de cours');\r\n    }\r\n  },\r\n\r\n  // Get courses with pagination\r\n  getCoursesWithPagination: async (page = 1, limit = 10) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses?page=${page}&limit=${limit}`);\r\n      return response.data; // Returns { courses: [...], pagination: {...} }\r\n    } catch (error) {\r\n      console.error('Error fetching courses with pagination:', error);\r\n      throw new Error('Erreur lors de la récupération des cours avec pagination');\r\n    }\r\n  }\r\n};\r\n\r\nexport default courseService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}