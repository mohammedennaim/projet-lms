{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\n\n// Create axios instance with default config\nconst courseAPI = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add interceptor to include JWT token\ncourseAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\ncourseAPI.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Course service functions\nexport const courseService = {\n  // Get all courses\n  getAllCourses: async () => {\n    try {\n      const response = await courseAPI.get('/admin/courses');\n      // Return courses array from admin API response structure\n      return response.data.courses || [];\n    } catch (error) {\n      console.error('Error fetching courses:', error);\n      throw new Error('Erreur lors de la récupération des cours');\n    }\n  },\n  // Get course by ID\n  getCourseById: async id => {\n    try {\n      const response = await courseAPI.get(`/admin/courses/${id}`);\n      // Admin API returns course object directly\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching course:', error);\n      throw new Error('Erreur lors de la récupération du cours');\n    }\n  },\n  // Create new course\n  createCourse: async courseData => {\n    try {\n      const response = await courseAPI.post('/admin/courses', courseData);\n      // Admin API returns { message, course }\n      return response.data.course || response.data;\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw new Error('Erreur lors de la création du cours');\n    }\n  },\n  // Update course\n  updateCourse: async (id, courseData) => {\n    try {\n      const response = await courseAPI.put(`/admin/courses/${id}`, courseData);\n      // Admin API returns { message, course }\n      return response.data.course || response.data;\n    } catch (error) {\n      console.error('Error updating course:', error);\n      throw new Error('Erreur lors de la mise à jour du cours');\n    }\n  },\n  // Delete course\n  deleteCourse: async id => {\n    try {\n      await courseAPI.delete(`/admin/courses/${id}`);\n      return true;\n    } catch (error) {\n      console.error('Error deleting course:', error);\n      throw new Error('Erreur lors de la suppression du cours');\n    }\n  },\n  // Search courses\n  searchCourses: async searchTerm => {\n    try {\n      const response = await courseAPI.get(`/admin/courses?search=${encodeURIComponent(searchTerm)}`);\n      // Return courses array from admin API response structure\n      return response.data.courses || [];\n    } catch (error) {\n      console.error('Error searching courses:', error);\n      throw new Error('Erreur lors de la recherche de cours');\n    }\n  },\n  // Get courses with pagination\n  getCoursesWithPagination: async (page = 1, limit = 10) => {\n    try {\n      const response = await courseAPI.get(`/admin/courses?page=${page}&limit=${limit}`);\n      return response.data; // Returns { courses: [...], pagination: {...} }\n    } catch (error) {\n      console.error('Error fetching courses with pagination:', error);\n      throw new Error('Erreur lors de la récupération des cours avec pagination');\n    }\n  }\n};\nexport default courseService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","courseAPI","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","courseService","getAllCourses","get","data","courses","console","Error","getCourseById","id","createCourse","courseData","post","course","updateCourse","put","deleteCourse","delete","searchCourses","searchTerm","encodeURIComponent","getCoursesWithPagination","page","limit"],"sources":["C:/Users/Youcode/Videos/symfony-api/projet-lms/FrontEnd/src/services/courseService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\r\n\r\n// Create axios instance with default config\r\nconst courseAPI = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add interceptor to include JWT token\r\ncourseAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\ncourseAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Course service functions\r\nexport const courseService = {  // Get all courses\r\n  getAllCourses: async () => {\r\n    try {\r\n      const response = await courseAPI.get('/admin/courses');\r\n      // Return courses array from admin API response structure\r\n      return response.data.courses || [];\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      throw new Error('Erreur lors de la récupération des cours');\r\n    }\r\n  },\r\n  // Get course by ID\r\n  getCourseById: async (id) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses/${id}`);\r\n      // Admin API returns course object directly\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching course:', error);\r\n      throw new Error('Erreur lors de la récupération du cours');\r\n    }\r\n  },\r\n\r\n  // Create new course\r\n  createCourse: async (courseData) => {\r\n    try {\r\n      const response = await courseAPI.post('/admin/courses', courseData);\r\n      // Admin API returns { message, course }\r\n      return response.data.course || response.data;\r\n    } catch (error) {\r\n      console.error('Error creating course:', error);\r\n      throw new Error('Erreur lors de la création du cours');\r\n    }\r\n  },\r\n\r\n  // Update course\r\n  updateCourse: async (id, courseData) => {\r\n    try {\r\n      const response = await courseAPI.put(`/admin/courses/${id}`, courseData);\r\n      // Admin API returns { message, course }\r\n      return response.data.course || response.data;\r\n    } catch (error) {\r\n      console.error('Error updating course:', error);\r\n      throw new Error('Erreur lors de la mise à jour du cours');\r\n    }\r\n  },\r\n\r\n  // Delete course\r\n  deleteCourse: async (id) => {\r\n    try {\r\n      await courseAPI.delete(`/admin/courses/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting course:', error);\r\n      throw new Error('Erreur lors de la suppression du cours');\r\n    }\r\n  },  // Search courses\r\n  searchCourses: async (searchTerm) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses?search=${encodeURIComponent(searchTerm)}`);\r\n      // Return courses array from admin API response structure\r\n      return response.data.courses || [];\r\n    } catch (error) {\r\n      console.error('Error searching courses:', error);\r\n      throw new Error('Erreur lors de la recherche de cours');\r\n    }\r\n  },\r\n\r\n  // Get courses with pagination\r\n  getCoursesWithPagination: async (page = 1, limit = 10) => {\r\n    try {\r\n      const response = await courseAPI.get(`/admin/courses?page=${page}&limit=${limit}`);\r\n      return response.data; // Returns { courses: [...], pagination: {...} }\r\n    } catch (error) {\r\n      console.error('Error fetching courses with pagination:', error);\r\n      throw new Error('Erreur lors de la récupération des cours avec pagination');\r\n    }\r\n  }\r\n};\r\n\r\nexport default courseService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}